from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from keyboards.client_keyboards import choise_1, choise_2, choise_inc
from create_bot import bot


# import google_sheet
# import string


class FSMAdmin(StatesGroup):
    date = State()
    category = State()
    exp = State()
    id = State()


class FSMAdmin_inc(StatesGroup):
    date = State()
    category = State()
    exp = State()
    id = State()


#     –ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ë–î(–ø–æ–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ë–î aiogram)
#  @dp.message_handler(commands='–î–æ–±–∞–≤–∏—Ç—å', state=None)
async def fsm_start(callback_query: types.CallbackQuery):
    await FSMAdmin.date.set()
    await bot.send_message(callback_query.from_user.id, '‚è±Ô∏è–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')


# –õ–æ–≤–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
# @dp.messega_handler(content_types=['date'], state=FSMAdmin.date)
async def load_date(message: types.Message, state: FSMContext):
    if message.text[2] == "." and message.text[5] == ".":
        if message.text.replace(".", "").isdigit():
            if int(message.text.replace(".", "")[0:2]) < 32 and int(message.text.replace(".", "")[2:4]) < 13:
                if int(message.text.replace(".", "")[4:6]) == 20:
                    async with state.proxy() as data:
                        data['date'] = message.text
                    await FSMAdmin.next()
                    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã', reply_markup=choise_1)
                else:
                    await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
            else:
                await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
        else:
            await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
    else:
        await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")


#  –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
# @dp.messega_handler(content_types=['category'], state=FSMAdmin.category)
async def load_category(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = callback_query.data
    print(data)
    await FSMAdmin.next()
    await bot.send_message(callback_query.from_user.id, 'üí∏–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É')


#     –õ–æ–≤–∏–º —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
# @dp.messega_handler(content_types=['expanses'], state=FSMAdmin.exp)
async def load_expanses(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['expanses'] = message.text
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, "–ñ–º–∏ üëå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ–±—ã –∑–∞–ø—Å–∏–∞—Ç—å \n"
                                                     "–∏–ª–∏ ‚õî –û—Ç–º–µ–Ω–∞ —á—Ç–æ–±—ã —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–ª —á—Ç–æ —Ç—ã —Ç—Ä–∞–Ω–∂–∏—Ä–∞",
                               reply_markup=choise_2)
    else:
        await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")


# –õ–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
# @dp.messega_handler(content_types=['id'], state=FSMAdmin.exp)
async def load_id(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "Yes":
        async with state.proxy() as data:
            data['id'] = callback_query.from_user.id
            data['name'] = callback_query.from_user.first_name
        await bot.send_message(callback_query.from_user.id, str(data))
        await state.finish()
    elif callback_query.data == "No":
        await bot.send_message(callback_query.from_user.id, "–û—Ç–º–µ–Ω–∏–ª")
        await state.finish()


async def fsm_income_start(callback_query: types.CallbackQuery):
    await FSMAdmin_inc.date.set()
    await bot.send_message(callback_query.from_user.id, '‚è±Ô∏è–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')


async def load_income(message: types.Message, state: FSMContext):
    if message.text[2] == "." and message.text[5] == ".":
        if message.text.replace(".", "").isdigit():
            if int(message.text.replace(".", "")[0:2]) < 32 and int(message.text.replace(".", "")[2:4]) < 13:
                if int(message.text.replace(".", "")[4:6]) == 20:
                    async with state.proxy() as data:
                        data['date'] = message.text
                    await FSMAdmin_inc.next()
                    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã',
                                           reply_markup=choise_inc)
                else:
                    await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
            else:
                await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
        else:
            await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
    else:
        await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")


async def inc_category(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = callback_query.data
    print(data)
    await FSMAdmin_inc.next()
    await bot.send_message(callback_query.from_user.id, 'üí∏–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É')


async def inc_value(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['expanses'] = message.text
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, "–ñ–º–∏ üëå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ–±—ã –∑–∞–ø—Å–∏–∞—Ç—å \n"
                                                     "–∏–ª–∏ ‚õî –û—Ç–º–µ–Ω–∞ —á—Ç–æ–±—ã —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–ª —á—Ç–æ —Ç—ã —Ç—Ä–∞–Ω–∂–∏—Ä–∞",
                               reply_markup=choise_2)
    else:
        await bot.send_message(message.from_user.id, "üíÄ–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞, –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")


async def load_inc_id(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "Yes":
        async with state.proxy() as data:
            data['id'] = callback_query.from_user.id
            data['name'] = callback_query.from_user.first_name
        await bot.send_message(callback_query.from_user.id, str(data))
        await state.finish()
    elif callback_query.data == "No":
        await bot.send_message(callback_query.from_user.id, "–û—Ç–º–µ–Ω–∏–ª")
        await state.finish()


def register_message_admin(dp: Dispatcher):
    dp.register_callback_query_handler(fsm_start, text='add_expansis', state=None)
    dp.register_message_handler(load_date, state=FSMAdmin.date)
    dp.register_callback_query_handler(load_category, state=FSMAdmin.category)
    dp.register_message_handler(load_expanses, state=FSMAdmin.exp)
    dp.register_callback_query_handler(load_id, state=FSMAdmin.id)
    dp.register_message_handler(fsm_income_start, text='add_income', state=None)
    dp.register_message_handler(load_income, state=FSMAdmin_inc.date)
    dp.register_callback_query_handler(inc_category, state=FSMAdmin_inc.category)
    dp.register_message_handler(inc_value, state=FSMAdmin_inc.exp)
    dp.register_callback_query_handler(load_inc_id, state=FSMAdmin_inc.id)
